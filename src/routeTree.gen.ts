/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UpgradeImport } from './routes/upgrade'
import { Route as IndexImport } from './routes/index'
import { Route as PagesIndexImport } from './routes/pages/index'
import { Route as LogsIndexImport } from './routes/logs/index'
import { Route as AuditsIndexImport } from './routes/audits/index'
import { Route as AccountIndexImport } from './routes/account/index'
import { Route as PagesPageIdImport } from './routes/pages/$pageId'
import { Route as LogsLogIdImport } from './routes/logs/$logId'
import { Route as AuditsTestImport } from './routes/audits/test'
import { Route as AuditsAuditIdImport } from './routes/audits/$auditId'
import { Route as AuditsNewIndexImport } from './routes/audits/new/index'

// Create/Update Routes

const UpgradeRoute = UpgradeImport.update({
  id: '/upgrade',
  path: '/upgrade',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PagesIndexRoute = PagesIndexImport.update({
  id: '/pages/',
  path: '/pages/',
  getParentRoute: () => rootRoute,
} as any)

const LogsIndexRoute = LogsIndexImport.update({
  id: '/logs/',
  path: '/logs/',
  getParentRoute: () => rootRoute,
} as any)

const AuditsIndexRoute = AuditsIndexImport.update({
  id: '/audits/',
  path: '/audits/',
  getParentRoute: () => rootRoute,
} as any)

const AccountIndexRoute = AccountIndexImport.update({
  id: '/account/',
  path: '/account/',
  getParentRoute: () => rootRoute,
} as any)

const PagesPageIdRoute = PagesPageIdImport.update({
  id: '/pages/$pageId',
  path: '/pages/$pageId',
  getParentRoute: () => rootRoute,
} as any)

const LogsLogIdRoute = LogsLogIdImport.update({
  id: '/logs/$logId',
  path: '/logs/$logId',
  getParentRoute: () => rootRoute,
} as any)

const AuditsTestRoute = AuditsTestImport.update({
  id: '/audits/test',
  path: '/audits/test',
  getParentRoute: () => rootRoute,
} as any)

const AuditsAuditIdRoute = AuditsAuditIdImport.update({
  id: '/audits/$auditId',
  path: '/audits/$auditId',
  getParentRoute: () => rootRoute,
} as any)

const AuditsNewIndexRoute = AuditsNewIndexImport.update({
  id: '/audits/new/',
  path: '/audits/new/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/upgrade': {
      id: '/upgrade'
      path: '/upgrade'
      fullPath: '/upgrade'
      preLoaderRoute: typeof UpgradeImport
      parentRoute: typeof rootRoute
    }
    '/audits/$auditId': {
      id: '/audits/$auditId'
      path: '/audits/$auditId'
      fullPath: '/audits/$auditId'
      preLoaderRoute: typeof AuditsAuditIdImport
      parentRoute: typeof rootRoute
    }
    '/audits/test': {
      id: '/audits/test'
      path: '/audits/test'
      fullPath: '/audits/test'
      preLoaderRoute: typeof AuditsTestImport
      parentRoute: typeof rootRoute
    }
    '/logs/$logId': {
      id: '/logs/$logId'
      path: '/logs/$logId'
      fullPath: '/logs/$logId'
      preLoaderRoute: typeof LogsLogIdImport
      parentRoute: typeof rootRoute
    }
    '/pages/$pageId': {
      id: '/pages/$pageId'
      path: '/pages/$pageId'
      fullPath: '/pages/$pageId'
      preLoaderRoute: typeof PagesPageIdImport
      parentRoute: typeof rootRoute
    }
    '/account/': {
      id: '/account/'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountIndexImport
      parentRoute: typeof rootRoute
    }
    '/audits/': {
      id: '/audits/'
      path: '/audits'
      fullPath: '/audits'
      preLoaderRoute: typeof AuditsIndexImport
      parentRoute: typeof rootRoute
    }
    '/logs/': {
      id: '/logs/'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof LogsIndexImport
      parentRoute: typeof rootRoute
    }
    '/pages/': {
      id: '/pages/'
      path: '/pages'
      fullPath: '/pages'
      preLoaderRoute: typeof PagesIndexImport
      parentRoute: typeof rootRoute
    }
    '/audits/new/': {
      id: '/audits/new/'
      path: '/audits/new'
      fullPath: '/audits/new'
      preLoaderRoute: typeof AuditsNewIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/upgrade': typeof UpgradeRoute
  '/audits/$auditId': typeof AuditsAuditIdRoute
  '/audits/test': typeof AuditsTestRoute
  '/logs/$logId': typeof LogsLogIdRoute
  '/pages/$pageId': typeof PagesPageIdRoute
  '/account': typeof AccountIndexRoute
  '/audits': typeof AuditsIndexRoute
  '/logs': typeof LogsIndexRoute
  '/pages': typeof PagesIndexRoute
  '/audits/new': typeof AuditsNewIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/upgrade': typeof UpgradeRoute
  '/audits/$auditId': typeof AuditsAuditIdRoute
  '/audits/test': typeof AuditsTestRoute
  '/logs/$logId': typeof LogsLogIdRoute
  '/pages/$pageId': typeof PagesPageIdRoute
  '/account': typeof AccountIndexRoute
  '/audits': typeof AuditsIndexRoute
  '/logs': typeof LogsIndexRoute
  '/pages': typeof PagesIndexRoute
  '/audits/new': typeof AuditsNewIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/upgrade': typeof UpgradeRoute
  '/audits/$auditId': typeof AuditsAuditIdRoute
  '/audits/test': typeof AuditsTestRoute
  '/logs/$logId': typeof LogsLogIdRoute
  '/pages/$pageId': typeof PagesPageIdRoute
  '/account/': typeof AccountIndexRoute
  '/audits/': typeof AuditsIndexRoute
  '/logs/': typeof LogsIndexRoute
  '/pages/': typeof PagesIndexRoute
  '/audits/new/': typeof AuditsNewIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/upgrade'
    | '/audits/$auditId'
    | '/audits/test'
    | '/logs/$logId'
    | '/pages/$pageId'
    | '/account'
    | '/audits'
    | '/logs'
    | '/pages'
    | '/audits/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/upgrade'
    | '/audits/$auditId'
    | '/audits/test'
    | '/logs/$logId'
    | '/pages/$pageId'
    | '/account'
    | '/audits'
    | '/logs'
    | '/pages'
    | '/audits/new'
  id:
    | '__root__'
    | '/'
    | '/upgrade'
    | '/audits/$auditId'
    | '/audits/test'
    | '/logs/$logId'
    | '/pages/$pageId'
    | '/account/'
    | '/audits/'
    | '/logs/'
    | '/pages/'
    | '/audits/new/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UpgradeRoute: typeof UpgradeRoute
  AuditsAuditIdRoute: typeof AuditsAuditIdRoute
  AuditsTestRoute: typeof AuditsTestRoute
  LogsLogIdRoute: typeof LogsLogIdRoute
  PagesPageIdRoute: typeof PagesPageIdRoute
  AccountIndexRoute: typeof AccountIndexRoute
  AuditsIndexRoute: typeof AuditsIndexRoute
  LogsIndexRoute: typeof LogsIndexRoute
  PagesIndexRoute: typeof PagesIndexRoute
  AuditsNewIndexRoute: typeof AuditsNewIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UpgradeRoute: UpgradeRoute,
  AuditsAuditIdRoute: AuditsAuditIdRoute,
  AuditsTestRoute: AuditsTestRoute,
  LogsLogIdRoute: LogsLogIdRoute,
  PagesPageIdRoute: PagesPageIdRoute,
  AccountIndexRoute: AccountIndexRoute,
  AuditsIndexRoute: AuditsIndexRoute,
  LogsIndexRoute: LogsIndexRoute,
  PagesIndexRoute: PagesIndexRoute,
  AuditsNewIndexRoute: AuditsNewIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/upgrade",
        "/audits/$auditId",
        "/audits/test",
        "/logs/$logId",
        "/pages/$pageId",
        "/account/",
        "/audits/",
        "/logs/",
        "/pages/",
        "/audits/new/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/upgrade": {
      "filePath": "upgrade.tsx"
    },
    "/audits/$auditId": {
      "filePath": "audits/$auditId.tsx"
    },
    "/audits/test": {
      "filePath": "audits/test.tsx"
    },
    "/logs/$logId": {
      "filePath": "logs/$logId.tsx"
    },
    "/pages/$pageId": {
      "filePath": "pages/$pageId.tsx"
    },
    "/account/": {
      "filePath": "account/index.tsx"
    },
    "/audits/": {
      "filePath": "audits/index.tsx"
    },
    "/logs/": {
      "filePath": "logs/index.tsx"
    },
    "/pages/": {
      "filePath": "pages/index.tsx"
    },
    "/audits/new/": {
      "filePath": "audits/new/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
